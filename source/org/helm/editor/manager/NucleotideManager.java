/*
 * MonomerManager.java
 *
 * Created on November 24, 2008, 12:59 PM
 */
package org.helm.editor.manager;

//import org.helm.ri.rtc.rnai.opg.service.client.AdminUserManager;
import org.helm.notation.NotationConstant;
import org.helm.notation.NucleotideFactory;
import org.helm.editor.editor.MacromoleculeEditor;
import org.helm.editor.worker.NucleotideRegistar;
import org.helm.notation.model.Monomer;
import org.helm.notation.model.Nucleotide;
import org.helm.notation.tools.SimpleNotationParser;
import java.awt.Cursor;
//import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 * 
 * @author zhangtianhong
 */
public class NucleotideManager extends javax.swing.JDialog {

	/** Creates new form MonomerManager */
	private MacromoleculeEditor editor;

	public NucleotideManager(MacromoleculeEditor editor, boolean modal) {
		super(editor.getFrame(), modal);
		this.editor = editor;
		initComponents();
		nucleotideTable.setModel(new NucleotideTableModel());
	}

	public void customInit() {
		registerButton.setEnabled(true);
	}

	public void refreshContent() {
		nucleotideTable.setModel(new NucleotideTableModel());
	}

	public void refreshContent(String xmlString) {
		nucleotideTable.setModel(new NucleotideTableModel(xmlString));
	}

	public MacromoleculeEditor getEditor() {
		return editor;
	}

	private void populateDetailPanel(Nucleotide nucleotide) {
		symbolTextField.setText(nucleotide.getSymbol());
		NotationTextField.setText(nucleotide.getNotation());
	}

	private String getNucleotideXMLString(Nucleotide nucleotide) {
		StringBuffer sb = new StringBuffer();
		sb.append("<NUCLEOTIDE><SYMBOL>");

		if (nucleotide.getSymbol() != null) {
			sb.append(nucleotide.getSymbol());
		} else {
			sb.append("");
		}
		sb.append("</SYMBOL><MONOMER_NOTATION>");

		if (nucleotide.getNotation() != null) {
			sb.append(nucleotide.getNotation());
		} else {
			sb.append("");
		}
		sb.append("</MONOMER_NOTATION></NUCLEOTIDE>");
		return sb.toString();
	}

	private Nucleotide getNewNucleotide() {
		return new Nucleotide(symbolTextField.getText().trim(),
				NotationTextField.getText().trim());
	}

	public String getNewNucleotideXMLString() {
		return getNucleotideXMLString(getNewNucleotide());
	}

	private String validate(Nucleotide nuc) {
		StringBuffer sb = new StringBuffer();
		Map<String, String> normalMap;
		try {
			normalMap = NucleotideFactory.getInstance()
					.getNucleotideTemplates()
					.get(NotationConstant.NOTATION_SOURCE);
		} catch (Exception ex) {
			Logger.getLogger(NucleotideManager.class.getName()).log(
					Level.SEVERE, null, ex);
			return "Unable to perform nucleotide validation;";
		}

		if (null == nuc.getSymbol() || nuc.getSymbol().length() == 0) {
			sb.append("Nucleotide Symbol cannot be empty;\n");
		} else {
			if (normalMap.containsKey(nuc.getSymbol())) {
				sb.append("Nucleotide symbol '" + nuc.getSymbol()
						+ "' exists already;\n");
			}
		}

		if (null == nuc.getNotation() || nuc.getNotation().length() == 0) {
			sb.append("Nucleotide notation cannot be empty;\n");
		} else {
			if (normalMap.containsValue(nuc.getNotation())) {
				sb.append("Nucleotide notation '" + nuc.getNotation()
						+ "' exists already;\n");
			} else {
				try {
					SimpleNotationParser.validateSimpleNotation(
							nuc.getNotation(),
							Monomer.NUCLIEC_ACID_POLYMER_TYPE);
				} catch (Exception ex) {
					sb.append("Nucleotide notation '" + nuc.getNotation()
							+ "' is invalid;\n");
				}
			}
		}

		return sb.toString();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		detailPanel = new javax.swing.JPanel();
		registerButton = new javax.swing.JButton();
		symbolLabel = new javax.swing.JLabel();
		symbolTextField = new javax.swing.JTextField();
		notationLabel = new javax.swing.JLabel();
		NotationTextField = new javax.swing.JTextField();
		summaryPanel = new javax.swing.JPanel();
		saveButton = new javax.swing.JButton();
		tableScrollPane = new javax.swing.JScrollPane();
		nucleotideTable = new org.jdesktop.swingx.JXTable();
		closeButton = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setTitle("HELM Editor Nucleotide Manager");

		detailPanel.setBorder(javax.swing.BorderFactory
				.createTitledBorder("Define New Nucleotide"));

		registerButton.setText("Register");
		registerButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				registerButtonActionPerformed(evt);
			}
		});

		symbolLabel.setText("Symbol");

		notationLabel.setText("Notation");

		org.jdesktop.layout.GroupLayout detailPanelLayout = new org.jdesktop.layout.GroupLayout(
				detailPanel);
		detailPanel.setLayout(detailPanelLayout);
		detailPanelLayout
				.setHorizontalGroup(detailPanelLayout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(detailPanelLayout
								.createSequentialGroup()
								.addContainerGap()
								.add(detailPanelLayout
										.createParallelGroup(
												org.jdesktop.layout.GroupLayout.LEADING)
										.add(org.jdesktop.layout.GroupLayout.TRAILING,
												detailPanelLayout
														.createSequentialGroup()
														.add(detailPanelLayout
																.createParallelGroup(
																		org.jdesktop.layout.GroupLayout.LEADING,
																		false)
																.add(symbolLabel,
																		org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																		org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																		Short.MAX_VALUE)
																.add(notationLabel,
																		org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																		org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																		Short.MAX_VALUE))
														.add(16, 16, 16)
														.add(detailPanelLayout
																.createParallelGroup(
																		org.jdesktop.layout.GroupLayout.TRAILING)
																.add(NotationTextField,
																		org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																		85,
																		Short.MAX_VALUE)
																.add(symbolTextField,
																		org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																		85,
																		Short.MAX_VALUE)))
										.add(detailPanelLayout
												.createParallelGroup(
														org.jdesktop.layout.GroupLayout.TRAILING,
														false)
												.add(org.jdesktop.layout.GroupLayout.LEADING,
														registerButton,
														org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
														org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE)))
								.addContainerGap()));
		detailPanelLayout
				.setVerticalGroup(detailPanelLayout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(detailPanelLayout
								.createSequentialGroup()
								.add(detailPanelLayout
										.createParallelGroup(
												org.jdesktop.layout.GroupLayout.BASELINE)
										.add(symbolTextField,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
										.add(symbolLabel))
								.add(18, 18, 18)
								.add(detailPanelLayout
										.createParallelGroup(
												org.jdesktop.layout.GroupLayout.LEADING)
										.add(NotationTextField,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
										.add(notationLabel))
								.addPreferredGap(
										org.jdesktop.layout.LayoutStyle.UNRELATED)
								.add(registerButton)
								.addContainerGap(
										org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE)));

		summaryPanel.setBorder(javax.swing.BorderFactory
				.createTitledBorder("Nucleotide List"));

		saveButton.setText("Save to Local Disk");
		saveButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				saveButtonActionPerformed(evt);
			}
		});

		nucleotideTable.setModel(new javax.swing.table.DefaultTableModel(
				new Object[][] { { null, null, null, null },
						{ null, null, null, null }, { null, null, null, null },
						{ null, null, null, null } }, new String[] { "Title 1",
						"Title 2", "Title 3", "Title 4" }));
		nucleotideTable.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				nucleotideTableMouseClicked(evt);
			}
		});
		tableScrollPane.setViewportView(nucleotideTable);

		org.jdesktop.layout.GroupLayout summaryPanelLayout = new org.jdesktop.layout.GroupLayout(
				summaryPanel);
		summaryPanel.setLayout(summaryPanelLayout);
		summaryPanelLayout.setHorizontalGroup(summaryPanelLayout
				.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
				.add(summaryPanelLayout
						.createSequentialGroup()
						.addContainerGap()
						.add(saveButton,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
								133,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
						.addContainerGap(136, Short.MAX_VALUE))
				.add(tableScrollPane,
						org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 448,
						Short.MAX_VALUE));
		summaryPanelLayout
				.setVerticalGroup(summaryPanelLayout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(org.jdesktop.layout.GroupLayout.TRAILING,
								summaryPanelLayout
										.createSequentialGroup()
										.add(tableScrollPane,
												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
												339, Short.MAX_VALUE)
										.addPreferredGap(
												org.jdesktop.layout.LayoutStyle.UNRELATED)
										.add(summaryPanelLayout
												.createParallelGroup(
														org.jdesktop.layout.GroupLayout.BASELINE)
												.add(saveButton))
										.addContainerGap()));

		closeButton.setText("Close");
		closeButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				closeButtonActionPerformed(evt);
			}
		});

		org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
				.add(layout
						.createSequentialGroup()
						.addContainerGap()
						.add(summaryPanel,
								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
								Short.MAX_VALUE)
						.addPreferredGap(
								org.jdesktop.layout.LayoutStyle.RELATED)
						.add(layout
								.createParallelGroup(
										org.jdesktop.layout.GroupLayout.TRAILING)
								.add(detailPanel,
										org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
										org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE).add(closeButton))
						.addContainerGap()));
		layout.setVerticalGroup(layout
				.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
				.add(layout
						.createSequentialGroup()
						.addContainerGap()
						.add(layout
								.createParallelGroup(
										org.jdesktop.layout.GroupLayout.LEADING)
								.add(layout
										.createSequentialGroup()
										.add(detailPanel,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												org.jdesktop.layout.LayoutStyle.RELATED,
												222, Short.MAX_VALUE)
										.add(closeButton))
								.add(summaryPanel,
										org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
										org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE)).addContainerGap()));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void registerButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_registerButtonActionPerformed
		Nucleotide newNuc = getNewNucleotide();
		String validationResult = validate(newNuc);
		if (validationResult.length() > 0) {
			JOptionPane.showMessageDialog(getParent(),
					"Unable to register the nucleotide due to the following error(s):\n"
							+ validationResult, "Register Warning",
					JOptionPane.WARNING_MESSAGE);
			return;
		}

		NucleotideRegistar worker = new NucleotideRegistar(this);
		worker.execute();
		setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
	}// GEN-LAST:event_registerButtonActionPerformed

	private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_closeButtonActionPerformed
		setVisible(false);
	}// GEN-LAST:event_closeButtonActionPerformed

	private void nucleotideTableMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_nucleotideTableMouseClicked
		if (evt.getClickCount() == 2) {
			int rowIndex = nucleotideTable.getSelectedRow();
			int row = nucleotideTable.convertRowIndexToModel(rowIndex);
			if (rowIndex >= 0 && rowIndex < nucleotideTable.getRowCount()) {
				Nucleotide n = ((NucleotideTableModel) nucleotideTable
						.getModel()).getNucleotideList().get(row);
				populateDetailPanel(n);
			}
		}
	}// GEN-LAST:event_nucleotideTableMouseClicked

	private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_saveButtonActionPerformed
		try {
			setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
			NucleotideFactory.getInstance().saveNucleotideTemplates();// GEN-LAST:event_saveButtonActionPerformed
			setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
			JOptionPane.showMessageDialog(getParent(),
					"Successfully saved nucleotide templates to local disk",
					"Save Success", JOptionPane.INFORMATION_MESSAGE);
		} catch (Exception ex) {
			JOptionPane.showMessageDialog(
					getParent(),
					"Error saving nucleotide templates to local disk\n"
							+ ex.getMessage(), "Save Failure",
					JOptionPane.ERROR_MESSAGE);
			Logger.getLogger(NucleotideManager.class.getName()).log(
					Level.SEVERE, null, ex);
		} finally {
			setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
		}
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JTextField NotationTextField;
	private javax.swing.JButton closeButton;
	private javax.swing.JPanel detailPanel;
	private javax.swing.JLabel notationLabel;
	private org.jdesktop.swingx.JXTable nucleotideTable;
	private javax.swing.JButton registerButton;
	private javax.swing.JButton saveButton;
	private javax.swing.JPanel summaryPanel;
	private javax.swing.JLabel symbolLabel;
	private javax.swing.JTextField symbolTextField;
	private javax.swing.JScrollPane tableScrollPane;
	// End of variables declaration//GEN-END:variables
}
