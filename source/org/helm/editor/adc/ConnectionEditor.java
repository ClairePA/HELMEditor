/*******************************************************************************
 * Copyright C 2012, The Pistoia Alliance
 * 
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 ******************************************************************************/
/*
 * ConnectionEditor.java
 *
 * Created on Oct 21, 2011, 2:11:46 PM
 */
package org.helm.editor.adc;

import java.util.*;
import javax.swing.event.ChangeEvent;
import java.awt.event.*;
import org.helm.editor.protein.edit.ProteinEditor;
import org.helm.notation.model.PolymerEdge;
import javax.swing.SpinnerNumberModel;

/**
 *
 * @author YUANT05
 */
public class ConnectionEditor extends javax.swing.JPanel {

    /** Creates new form ConnectionEditor */
    public ConnectionEditor() {
        
        initComponents();

        aa.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(ItemEvent ie) {
                if (!notFiringOnChange)
                    fireOnChange() ;
            }
        });
        
        aa.addItem("");
        aa.addItem("C");
        aa.addItem("K");
        aa.addItem("E");
        aa.addItem("D");
        aa.addItem("Q");
    }
    
    public void fireOnChange() {
        if (!notFiringOnChange) {
            for (int i = 0; i < onchanges.size(); ++i)
                onchanges.get(i).actionPerformed(new ActionEvent(this, 0, "Data Cahnged"));
        }
    }
    
    public void addOnChangeListener(java.awt.event.ActionListener listener) {
        onchanges.add(listener);
    }
    
    public String getConnection() {
        // get Connection part of ADC notation
        Object a = aa.getSelectedItem();
        return a == null ? "" : a + "";
    }
    
    public void setConnection(String connect) {
            notFiringOnChange= true;;
            aa.setSelectedItem(getAminoAcid(connect));
            notFiringOnChange = false;
    }
    
    public static String getAminoAcid(String connect) {
        if (connect == null) 
            return null;
        int p1 = connect.indexOf(PolymerEdge.GENERIC_EDGE_KEY);
        if (p1 > 0) {
            p1 += PolymerEdge.GENERIC_EDGE_KEY.length()+1;
            int p2 = connect.indexOf("-", p1);
            if (p2 > p1)
                return connect.substring(p1, p2);
        }
        
        return null;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        aa = new javax.swing.JComboBox();

        setPreferredSize(new java.awt.Dimension(400, 44));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jLabel2.setText("Conjugation Amino Acid:");

        aa.setEditable(true);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 127, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(aa, 0, 198, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(aa, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
            aa.requestFocus(false);
    }//GEN-LAST:event_formMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox aa;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables

    private List<java.awt.event.ActionListener> onchanges = new ArrayList<java.awt.event.ActionListener>();
    private boolean notFiringOnChange = false;
}
