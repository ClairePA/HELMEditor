/*******************************************************************************
 * Copyright C 2012, The Pistoia Alliance
 * 
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 ******************************************************************************/
/*
 * ADCViewer.java
 *
 * Created on Nov 4, 2011, 3:18:34 PM
 */
package org.helm.editor.adc;

import java.awt.*;
import javax.swing.*;
import javax.swing.event.*;
import org.helm.editor.protein.view.ProteinViewer;
import chemaxon.marvin.beans.MViewPane;

/**
 * ADCViewer to revised Tab mode
 * 
 * @author YUANT05
 */
public class ADCViewer extends javax.swing.JPanel {

	/** Creates new form ADCViewer2 */
	public ADCViewer(ADCEditor editor) {
		initComponents();

		this.editor = editor;

		tabNotation = new NotationViewer(this.editor);
		tabAntibody = new ProteinViewer();
		tabStructure = new MViewPane();
		tabOverview = new Overview();

		panelTop.setLayout(new BorderLayout());
		panelTop.add(tabOverview, BorderLayout.CENTER);

		panelTabs.addTab("Antibody", null, tabAntibody);
		panelTabs.addTab("Linker Payload", null, tabStructure);
		panelTabs.addTab("Notation", null, tabNotation);

		panelTabs.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent evt) {
				JTabbedPane pane = (JTabbedPane) evt.getSource();
				Component tab = pane.getSelectedComponent();
				onTabChanged(tab);
			}
		});
	}

	public void enableParsingNotation(boolean f) {
		tabNotation.enableParsingNotation(f);
	}

	public void setNotation(String notation) {
		if (editor != null)
			editor.setNotation(notation);
		else {
			String[] ss = ADCEditor.parseNotation(notation);
			tabAntibody.setNotation(ss == null ? null : ss[0]);
			tabStructure.setM(0, ss == null ? null : ss[1]);
			tabNotation.setNotation(notation);
			tabOverview.setNotation(notation);
		}
	}

	public String getNotation() {
		return tabNotation.getNotation();
	}

	public void updateView() {
		Component tab = panelTabs.getSelectedComponent();
		onTabChanged(tab);
	}

	void onTabChanged(Component tab) {
		if (this.editor == null)
			return;

		if (tab == tabOverview) {
			String s = this.editor.getNotation();
			tabOverview.setNotation(s);
		} else if (tab == tabNotation) {
			String s = this.editor.getNotation();
			tabNotation.setNotation(s);
		} else if (tab == tabAntibody) {
			try {
				String s = this.editor.getAntibodyNotation();
				tabAntibody.setNotation(s);
			} catch (java.lang.Exception e) {
				tabAntibody.setNotation("");
			}
		} else if (tab == tabStructure) {
			String s = this.editor.getDrugStructure();
			tabStructure.setM(0, s);
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jSplitPane1 = new javax.swing.JSplitPane();
		panelTop = new javax.swing.JPanel();
		panelTabs = new javax.swing.JTabbedPane();

		jSplitPane1.setDividerLocation(250);
		jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

		panelTop.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

		org.jdesktop.layout.GroupLayout panelTopLayout = new org.jdesktop.layout.GroupLayout(
				panelTop);
		panelTop.setLayout(panelTopLayout);
		panelTopLayout.setHorizontalGroup(panelTopLayout.createParallelGroup(
				org.jdesktop.layout.GroupLayout.LEADING).add(0, 701,
				Short.MAX_VALUE));
		panelTopLayout.setVerticalGroup(panelTopLayout.createParallelGroup(
				org.jdesktop.layout.GroupLayout.LEADING).add(0, 249,
				Short.MAX_VALUE));

		jSplitPane1.setTopComponent(panelTop);
		jSplitPane1.setRightComponent(panelTabs);

		org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(
				this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				org.jdesktop.layout.GroupLayout.LEADING).add(
				org.jdesktop.layout.GroupLayout.TRAILING, jSplitPane1,
				org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 703,
				Short.MAX_VALUE));
		layout.setVerticalGroup(layout.createParallelGroup(
				org.jdesktop.layout.GroupLayout.LEADING).add(jSplitPane1,
				org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 516,
				Short.MAX_VALUE));
	}// </editor-fold>//GEN-END:initComponents
		// Variables declaration - do not modify//GEN-BEGIN:variables

	private javax.swing.JSplitPane jSplitPane1;
	private javax.swing.JTabbedPane panelTabs;
	private javax.swing.JPanel panelTop;
	// End of variables declaration//GEN-END:variables

	private ADCEditor editor;
	private NotationViewer tabNotation;
	private ProteinViewer tabAntibody;
	private MViewPane tabStructure;
	private Overview tabOverview;
}
