/*******************************************************************************
 * Copyright C 2012, The Pistoia Alliance
 * 
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 ******************************************************************************/
/*
 * NotationViewer.java
 *
 * Created on Oct 21, 2011, 3:31:14 PM
 */
package org.helm.editor.adc;

import java.awt.*;

/**
 * 
 * ADC notation viewer
 * 
 * @author YUANT05
 */
public class NotationViewer extends javax.swing.JPanel {

	/** Creates new form NotationViewer */
	public NotationViewer(ADCEditor editor) {
		initComponents();

		// set *editor* to null if you don't want users to be able to parse
		// notations
		this.editor = editor;
		if (editor != null) {
			reloadNotationButton.setEnabled(true);
			notationTextArea.setEditable(true);
		}
	}

	public String getNotation() {
		return notationTextArea.getText();
	}

	public void setNotation(String s) {
		notationTextArea.setText(s);
		notationTextArea.setForeground(s.startsWith("ERROR") ? Color.RED
				: Color.BLACK);
	}

	public void enableParsingNotation(boolean f) {
		reloadNotationButton.setEnabled(f);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		reloadNotationButton = new javax.swing.JButton();
		notationScrollPane = new javax.swing.JScrollPane();
		notationTextArea = new javax.swing.JTextArea();

		reloadNotationButton.setText("Reload Notation");
		reloadNotationButton.setToolTipText("");
		reloadNotationButton.setEnabled(false);
		reloadNotationButton
				.addMouseListener(new java.awt.event.MouseAdapter() {
					public void mouseClicked(java.awt.event.MouseEvent evt) {
						reloadNotationButtonMouseClicked(evt);
					}
				});

		notationTextArea.setColumns(20);
		notationTextArea.setEditable(false);
		notationTextArea.setLineWrap(true);
		notationTextArea.setRows(5);
		notationTextArea.setWrapStyleWord(true);
		notationScrollPane.setViewportView(notationTextArea);

		org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(
				this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
				.add(layout
						.createSequentialGroup()
						.addContainerGap()
						.add(layout
								.createParallelGroup(
										org.jdesktop.layout.GroupLayout.LEADING)
								.add(notationScrollPane,
										org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
										527, Short.MAX_VALUE)
								.add(reloadNotationButton)).addContainerGap()));
		layout.setVerticalGroup(layout.createParallelGroup(
				org.jdesktop.layout.GroupLayout.LEADING).add(
				layout.createSequentialGroup()
						.add(11, 11, 11)
						.add(reloadNotationButton)
						.addPreferredGap(
								org.jdesktop.layout.LayoutStyle.RELATED)
						.add(notationScrollPane,
								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
								91, Short.MAX_VALUE).addContainerGap()));
	}// </editor-fold>//GEN-END:initComponents

	private void reloadNotationButtonMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_reloadNotationButtonMouseClicked
		if (editor == null) {
			return;
		}

		String notation = notationTextArea.getText();
		editor.setNotation(notation);
	}// GEN-LAST:event_reloadNotationButtonMouseClicked
		// Variables declaration - do not modify//GEN-BEGIN:variables

	private javax.swing.JScrollPane notationScrollPane;
	private javax.swing.JTextArea notationTextArea;
	private javax.swing.JButton reloadNotationButton;
	// End of variables declaration//GEN-END:variables
	ADCEditor editor;
}
