/**
 * *****************************************************************************
 * Copyright C 2012, The Pistoia Alliance
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *****************************************************************************
 */
/*
 * TableCellRendererSample.java
 *
 * Created on Oct 20, 2009, 1:09:17 PM
 */
package org.helm.editor.sample;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import org.helm.editor.data.RNAPolymer;
import org.helm.editor.protein.view.PeptidePolymer;
import org.helm.editor.renderer.HELMGraphTableCellRenderer;
import org.helm.editor.renderer.HELMMonomerGraphTableCellRenderer;
import org.helm.editor.renderer.PeptideTableCellRenderer;
import org.helm.editor.renderer.RNATableCellRenderer;
import org.helm.editor.utility.JTableRowResizer;
import org.helm.notation.MonomerFactory;
import org.helm.notation.NucleotideFactory;

/**
 *
 * @author zhangtianhong
 */
public class TableCellRendererSample extends javax.swing.JFrame {

    /**
     * Creates new form TableCellRendererSample
     */
    public TableCellRendererSample() {
        initComponents();
        customInit();
    }

    private void customInit() {

        viewerTable.setRowHeight(100);
        new JTableRowResizer(viewerTable);

        model = new CustomTableModel();
        viewerTable.setModel(model);

        int index = 0;
        TableColumnModel tcm = viewerTable.getColumnModel();
        TableColumn rowCol = tcm.getColumn(index);
        rowCol.setMinWidth(50);
        rowCol.setMaxWidth(50);
        index++;

        TableColumn helmCol = tcm.getColumn(index);
        HELMGraphTableCellRenderer helmRenderer = new HELMGraphTableCellRenderer();
        helmCol.setCellRenderer(helmRenderer);
        index++;

        TableColumn helmMonomerCol = tcm.getColumn(index);
        HELMMonomerGraphTableCellRenderer helmMonomerRenderer = new HELMMonomerGraphTableCellRenderer();
        helmMonomerCol.setCellRenderer(helmMonomerRenderer);
        index++;

        TableColumn pfredCol = tcm.getColumn(index);
        RNATableCellRenderer pfredRenderer = new RNATableCellRenderer();
        pfredRenderer.setDisplayMode(RNATableCellRenderer.LETTER_DISPLAY_MODE);
        pfredCol.setCellRenderer(pfredRenderer);
        index++;

        TableColumn pfredBlockCol = tcm.getColumn(index);
        RNATableCellRenderer pfredRenderer2 = new RNATableCellRenderer();
        pfredRenderer2.setDisplayMode(RNATableCellRenderer.SIMPLE_BLOCK_DISPLAY_MODE);
        pfredBlockCol.setCellRenderer(pfredRenderer2);
        index++;

        TableColumn pfredBlockCol2 = tcm.getColumn(index);
        RNATableCellRenderer pfredRenderer3 = new RNATableCellRenderer();
        pfredRenderer3.setDisplayMode(RNATableCellRenderer.ENHANCED_BLOCK_DISPLAY_MODE);
        pfredBlockCol2.setCellRenderer(pfredRenderer3);
        index++;

        TableColumn peptideCol = tcm.getColumn(index);
        PeptideTableCellRenderer peptideRender = new PeptideTableCellRenderer();
        peptideCol.setCellRenderer(peptideRender);
    }

    private void setData(String data) {
        notationTextArea.setText(data);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        notationTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        viewerTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TableCellRenderSample");

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Input Notation Separated with Space"));

        notationTextArea.setColumns(20);
        notationTextArea.setLineWrap(true);
        notationTextArea.setRows(5);
        notationTextArea.setWrapStyleWord(true);
        notationTextArea.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane1.setViewportView(notationTextArea);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("Structure Table"));

        viewerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "HELM", "PFRED"
            }
        ));
        jScrollPane2.setViewportView(viewerTable);

        jButton1.setText("Show Structure");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)
                            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE))
                        .addContainerGap())
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(jButton1)
                        .add(18, 18, 18))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 161, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String input = notationTextArea.getText();
        model.setData(input);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
//             final String notation = "RNA1{R(A)P.R(G)P.R(C)P.R(U)P.R(U)P.R(U)}|RNA2{R(A)P.R(A)P.R(A)P.R(G)P.R(C)P.R(U)}$$RNA1,RNA2,14:pair-5:pair|RNA1,RNA2,8:pair-11:pair|RNA1,RNA2,2:pair-17:pair|RNA1,RNA2,17:pair-2:pair|RNA1,RNA2,5:pair-14:pair|RNA1,RNA2,11:pair-8:pair$$\n" +
//                     "RNA1{R(A)P.R(G)P.R(C)P.R(U)P.R(U)P.R(U)P}|RNA2{R(A)P.R(A)P.R(A)P.R(G)P.R(C)P.R(U)}|CHEM1{SS3}$RNA1,CHEM1,18:R2-1:R1$RNA1,RNA2,14:pair-5:pair|RNA1,RNA2,8:pair-11:pair|RNA1,RNA2,2:pair-17:pair|RNA1,RNA2,17:pair-2:pair|RNA1,RNA2,5:pair-14:pair|RNA1,RNA2,11:pair-8:pair$$";
//            final String notation = "RNA1{R(A)P.R(G)P.R(C)P.R(U)P.R(U)P.R(U)}|RNA2{R(A)P.R(A)P.R(A)P.R(G)P.R(C)P.R(U)}$$RNA1,RNA2,14:pair-5:pair|RNA1,RNA2,8:pair-11:pair|RNA1,RNA2,2:pair-17:pair|RNA1,RNA2,17:pair-2:pair|RNA1,RNA2,5:pair-14:pair|RNA1,RNA2,11:pair-8:pair$$ RNA1{R(A)P.R(G)P.R(C)P.R(U)P.R(U)P.R(U)P}|RNA2{R(A)P.R(A)P.R(A)P.R(G)P.R(C)P.R(U)}|CHEM1{SS3}$RNA1,CHEM1,18:R2-1:R1$RNA1,RNA2,14:pair-5:pair|RNA1,RNA2,8:pair-11:pair|RNA1,RNA2,2:pair-17:pair|RNA1,RNA2,17:pair-2:pair|RNA1,RNA2,5:pair-14:pair|RNA1,RNA2,11:pair-8:pair$RNA1{ss}|RNA2{as}$ RNA1{[LR](A)[sP].[LR]([5meC])[sP].[LR](A)[sP].[dR](T)[sP].[dR](T)[sP].[dR](G)[sP].[dR](T)[sP].[dR](T)[sP].[dR](G)[sP].[dR](G)[sP].[dR]([5meC])[sP].[LR](G)[sP].[LR](A)[sP].[LR](A)}$$$$";
            String peptide1 = "PEPTIDE1{A.G.C.K.L.L.K.K}|PEPTIDE2{A.G.K.C.[seC].G.C.L.A.G.K.[seC].G.C.A.L.A.G.K.[seC].G.A.L.A.G.K.[seC].G.A.L.A.G.K.[seC].G.A.L.A.G.K.[seC].G.A.L.A.G.K.[seC].G.A.L.A.G.K.[seC].G.A.L.A.G.K.[seC].G.A.L.A.G.K.[seC].G.A.L.A.G.K.[seC].G.A.L.A.G.K.[seC].G.A.L.A.G.K.[seC].G.A.L.A.G.K.[seC].G.A.L.A.G.K.[seC].G.A.L.A.G.K.[seC].G.A.L.A.G.K.[seC].G.A.L.A.G.K.[seC].G.A.L}$PEPTIDE2,PEPTIDE1,7:R3-3:R3|PEPTIDE2,PEPTIDE2,4:R3-14:R3$$$";
            String peptide2 = "PEPTIDE1{A.G.C.K.L.L.C.K.K}$PEPTIDE1,PEPTIDE1,7:R3-3:R3$$PEPTIDE1{pp}$";
            String rna1 = "RNA1{R(A)P.R(G)P.R(C)P.R(U)P.R(U)P.R(U)}|RNA2{R(A)P.R(A)P.R(A)P.R(G)P.R(C)P.R(U)}$$RNA1,RNA2,14:pair-5:pair|RNA1,RNA2,8:pair-11:pair|RNA1,RNA2,2:pair-17:pair|RNA1,RNA2,17:pair-2:pair|RNA1,RNA2,5:pair-14:pair|RNA1,RNA2,11:pair-8:pair$$";

            final String notation = peptide1 + " " + peptide2 + " " + rna1;
            MonomerFactory.getInstance().getMonomerDB();
            
            NucleotideFactory.getInstance().getNucleotideTemplates();
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    TableCellRendererSample sample = new TableCellRendererSample();
                    sample.setData(notation);
                    sample.setVisible(true);
                }
            });
        } catch (Exception ex) {
            Logger.getLogger(TableCellRendererSample.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea notationTextArea;
    private javax.swing.JTable viewerTable;
    // End of variables declaration//GEN-END:variables
    private CustomTableModel model;

    private class CustomTableModel extends AbstractTableModel {

        private String[] columnNames = {"Row #", "HELM Editor Sequence", "HELM Editor Monomer", "RNA Letter", "RNA Block", "RNA Enhanced Block", "Peptide Sequence"};
        private final List<String> data = new ArrayList<String>();

        public CustomTableModel() {
        }

        @Override
        public String getColumnName(int col) {
            return columnNames[col];
        }

        public int getRowCount() {
            return data.size();
        }

        public int getColumnCount() {
            return columnNames.length;
        }

        public Object getValueAt(int rowIndex, int columnIndex) {
            String notation = data.get(rowIndex);
            switch (columnIndex) {
                case 0:
                    return new Integer(rowIndex + 1);

                case 1:
                    return notation;

                case 2:
                    return notation;

                case 3:
                    return new RNAPolymer(notation);

                case 4:
                    return new RNAPolymer(notation);

                case 5:
                    return new RNAPolymer(notation);

                case 6:
                    return new PeptidePolymer(notation);
                default:
                    return "N/A";
            }
        }

        public void setData(String newData) {
            String[] notations = newData.split("\\s");
            List<String> l = new ArrayList<String>();
            for (String notation : notations) {
                l.add(notation);
            }
            setData(l);
        }

        public synchronized void setData(List<String> newData) {
            synchronized (data) {
                data.clear();
                for (int i = 0; i < newData.size(); i++) {
                    data.add(newData.get(i));
                }
            }
            fireTableDataChanged();
        }

        public synchronized void clear() {
            synchronized (data) {
                data.clear();
            }
            fireTableDataChanged();
        }

        @Override
        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }
    }
}
